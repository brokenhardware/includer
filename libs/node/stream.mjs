import{a as d,b,c as m}from"./chunk-AAUDITJX.mjs";var u=function(){};function s(e,t={}){u.prototype.name=e;let i={};return new Proxy(u,{get(n,a){return a==="caller"?null:a==="__createMock__"?s:a==="__unenv__"?!0:a in t?t[a]:i[a]=i[a]||s(`${e}.${a.toString()}`)},apply(n,a,f){return s(`${e}()`)},construct(n,a,f){return s(`[${e}]`)},enumerate(){return[]}})}var o=s("mock");function p(e){return new Error(`[unenv] ${e} is not implemented yet!`)}function r(e){return Object.assign(()=>{throw p(e)},{__unenv__:!0})}var l=r("stream.promises.finished"),c=r("stream.promises.pipeline"),_={finished:l,pipeline:c};var y=class extends m{__unenv__=!0;_transform(e,t,i){}_flush(e){}},h=globalThis.Transform||y,v=o.__createMock__("Stream"),g=o.__createMock__("PassThrough"),A=r("stream.pipeline"),T=r("stream.finished"),x=r("stream.addAbortSignal"),S=r("stream.isDisturbed"),$=r("stream.isReadable"),w=r("stream.compose"),D=r("stream.isErrored"),E=r("stream.destroy"),P=r("stream._isUint8Array"),R=r("stream._uint8ArrayToBuffer"),F={Readable:d,Writable:b,Duplex:m,Transform:h,Stream:v,PassThrough:g,pipeline:A,finished:T,addAbortSignal:x,promises:_,isDisturbed:S,isReadable:$,compose:w,_uint8ArrayToBuffer:R,isErrored:D,destroy:E,_isUint8Array:P};export{m as Duplex,g as PassThrough,d as Readable,v as Stream,h as Transform,b as Writable,P as _isUint8Array,R as _uint8ArrayToBuffer,x as addAbortSignal,w as compose,F as default,E as destroy,T as finished,S as isDisturbed,D as isErrored,$ as isReadable,A as pipeline};
